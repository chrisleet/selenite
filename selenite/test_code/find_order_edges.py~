from astropy.io import fits
from glob import glob
import matplotlib.pyplot as plt
import numpy as np

import expres.selenite.load_store.load_fits_new as load_fits


# Plots a given order for each spectrum from a given epoch; 
# on click places a line, after two lines prints pixel range and wavelength 
# range.

def build_px_masks():

  np.seterr(all='raise')

  # 0: Parse program arguments
  parser = argparse.ArgumentParser(description="helps build pixel mask")
  parser.add_argument("order", help="specify order to plot")
  parser.add_argument("epoch", help="specify epoch to plot")
  args = parser.parse_args()

  # 1(a): Get spectrum names
  all_spectrum_names = glob("/home/chrisleet/astronomy/data/fitspec/201*/*/HR*")

  # 1(b): Get bad spectra
  bad_spectra_f = open(("/home/chrisleet/astronomy/expres_pipeline/expres"
                        "/selenite/config/bad_spectra.txt"), "r")
  bad_spectra = []
  for line in bad_spectra_f:
    bad_spectra.append(line[:-1])

  # 1(c) Remove bad spectra from spectra names
  spectra_names = set(all_spectra_names) - set(bad_spectra)

  # 2 Get epoch transition dates
  transition_dates = load_fits.generate_epoch_transition_dates()

  # 3: Plot each spectra.
  fig = plt.figure(facecolor="white")
  for fname in spectra_names:
    f = fits.open(fname, do_not_scale_file=True)
    
    # 3(a) Reject any spectra not from the chosen epoch
    if load_fits.get_observation_epoch(f[0].header["DATE-OBS"], 
                                       transition_dates) != int(args.epoch):
      continue 

    # 3(b) Plot each spectra
    lin_x = f[1].data.wavelength[order]
    lin_y = f[1].data.spectrum[order]
    plt.plot(lin_x, lin_y)

  plt.show()

if __name__ == "__main__":
  
    
    

