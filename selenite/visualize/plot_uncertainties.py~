from filter_bstars import B_PEAK_ST, B_PEAK_END

def plot_bstar_snrs(shard_dict, config):

  good_spectra_no = 0
  spectra_no = 0
  cmap = plt.get_cmap('Spectral')

  for order, shard in shard_dict.items():

    # 1: Find maximum mean blaze peak SNR 
    max_peak_snr = 0
    for spectrum in shard.spectra.values():
      blaze_peak_snr = np.mean(spectrum.snrs[B_PEAK_ST:B_PEAK_END])
      if blaze_peak_snr > max_peak_snr:
        max_peak_snr = blaze_peak_snr

    # 2: Plot each spectrum colored by and annotated with its SNR
    for spectrum in shard.spectra.values():
      
      # 2(a): Get spectrum mean blaze peak SNR and norm it
      blaze_peak_snr = np.mean(spectrum.snrs[B_PEAK_ST:B_PEAK_END])
      normed_peak_snr = blaze_peak_snr/max_peak_snr

      # 2(b): If spectra blaze peak snr > cutoff, color spectra by its snr
      #       and increment good spectra
      if blaze_peak_snr > config["b_star_SNR_cutoff"]:
        plt.plot(spectrum.lin_x, np.exp(spectrum.log_y), 
                 color=cmap(normed_peak_snr))
        mid_px = int(len(spectrum.lin_x) / 2)
        plt.annotate(blaze_peak_snr, xy=(lin_x[mid_px], lin_y[mid_px]))
        good_spectra_no += 1

      # 2(c): Otherwise, color spectra red
      else:
        plt.plot(lin_x, np.exp(lin_y), color="r")

      spectra_no += 1
    
    # 3: Print out the number and percent of good spectra
    print("Good spectra:", good_spectra_no, "/", spectra_no, \
          good_spectra_no/float(spectra_no) * 100, "%")
